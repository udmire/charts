apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "loki.fullname" . }}-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "loki.labels" . | nindent 4 }}
data:
  loki.yaml: |
    auth_enabled: true
    server:
      http_listen_port: {{ .Values.config.server.httpListenPort }}
      grpc_listen_port: {{ .Values.config.server.grpcListenPort }}
      grpc_server_max_recv_msg_size: 104857600
      grpc_server_max_send_msg_size: 104857600
      grpc_server_max_concurrent_streams: 100000
    compactor:
      working_directory: /loki/compactor
      compaction_interval: 30m
      retention_enabled: true
      compactor_ring:
        kvstore:
          store: memberlist
          prefix: logs/compactor/
    distributor:
      ring:
        kvstore:
          store: memberlist
          prefix: logs/distributor/
    frontend_worker:
      grpc_client_config:
        max_send_msg_size: 104857600
        grpc_compression: snappy
    frontend:
      log_queries_longer_than: 10s
      compress_responses: true
      max_body_size: 104857600
      query_stats_enabled: true
      tail_proxy_url: 'http://{{ template "loki.fullname" . }}-read.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.config.server.httpListenPort }}'
      grpc_client_config:
        grpc_compression: snappy
    query_scheduler:
      grpc_client_config:
        grpc_compression: snappy
      use_scheduler_ring: true
      scheduler_ring:
        kvstore:
          store: memberlist
          prefix: logs/scheduler/
    ingester_client:
      grpc_client_config:
        grpc_compression: snappy
    ingester:
      chunk_block_size: 524288
      chunk_target_size: 3145728
      chunk_idle_period: 15m
      chunk_retain_period: 15m
      chunk_encoding: zstd
      max_chunk_age: 1h
      wal:
        enabled: true
        dir: /loki/wal
        replay_memory_ceiling: 10GB
      max_transfer_retries: 0
      lifecycler:
        ring:
          replication_factor: 3
          kvstore:
            store: memberlist
            prefix: logs/ingesters/
        num_tokens: 512
        join_after: 0s
        final_sleep: 0s
        heartbeat_period: 5s
        tokens_file_path: /loki/tokens
    limits_config:
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      max_cache_freshness_per_query: 10m
      split_queries_by_interval: 15m
      ingestion_rate_mb: 40
      ingestion_burst_size_mb: 60
    schema_config:
      configs:
      - from: 2022-03-15
        store: boltdb-shipper
        {{- if .Values.global.storage.backend }}
        {{- if eq .Values.global.storage.backend "s3"}}
        object_store: aws
        {{- end }}
        {{- else if .Values.minio.enabled }}
        object_store: aws
        {{- else }}
        object_store: filesystem
        {{- end }}
        schema: v12
        index:
          prefix: loki_index_
          period: 24h
    chunk_store_config:
      {{- if index .Values "memcached-chunks" "enabled" }}
      chunk_cache_config:
        memcached_client:
          addresses: dns+{{ template "loki.memcachedChunks" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:11211
      {{- end }}
      {{- if index .Values "memcached-index-writes" "enabled" }}
      write_dedupe_cache_config:
        memcached_client:
          addresses: dns+{{ template "loki.memcachedIndexWrites" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:11211
      {{- end }}
      cache_lookups_older_than: 2h
    storage_config:
      boltdb_shipper:
        index_gateway_client:
          grpc_client_config:
            grpc_compression: snappy
        active_index_directory: /loki/index
        cache_location: /loki/cache
      {{- if .Values.global.storage.backend }}
        shared_store: {{.Values.global.storage.backend}}
      {{- if eq .Values.global.storage.backend "s3"}}
      aws:
        endpoint: {{ include "ContentRender" ( dict "value" .Values.global.storage.s3.endpoint "context" . ) }}
        bucketnames: {{ include "ContentRender" ( dict "value" .Values.global.storage.buckets.logData "context" . ) }}
        access_key_id: {{ include "ContentRender" ( dict "value" .Values.global.storage.s3.accessKey "context" . ) }}
        secret_access_key: {{ include "ContentRender" ( dict "value" .Values.global.storage.s3.secretKey "context" . ) }}
        insecure: {{ default true .Values.global.storage.s3.insecure }}
        s3forcepathstyle: true
      {{- end }}
      {{- else if .Values.minio.enabled }}
        shared_store: s3
      aws:
        endpoint: {{ template "loki.minio" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:9000
        {{- with (index .Values.minio.buckets 0) }}
        bucketnames: {{ .name }}
        {{- end }}
        access_key_id: {{ .Values.minio.accessKey }}
        secret_access_key: {{ .Values.minio.secretKey }}
        insecure: true
        s3forcepathstyle: true
      {{- else }}
        shared_store: filesystem
      filesystem:
        directory: /loki/chunks
      {{- end }}
    querier:
      query_ingesters_within: 2h
    query_range:
      align_queries_with_step: true
      max_retries: 5
      {{- if index .Values "memcached-frontend" "enabled" }}
      cache_results: true
      results_cache:
        compression: snappy
        cache:
          memcached_client:
            addresses: dns+{{ template "loki.memcachedFrontend" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:11211
      {{- end }}
    ruler:
      {{- if .Values.config.ruler.alertmanager }}
      {{- include "ContentRender" ( dict "value" .Values.config.ruler.alertmanager "context" . ) | nindent 6 }}
      {{- end }}
      enable_sharding: true
      rule_path: /loki/rules
      ring:
        kvstore:
          store: memberlist
          prefix: logs/ruler/
      storage:
        {{- if .Values.global.storage.backend }}
        type: {{.Values.global.storage.backend}}
        {{- if eq .Values.global.storage.backend "s3"}}
        s3:
          endpoint: {{ include "ContentRender" ( dict "value" .Values.global.storage.s3.endpoint "context" . ) }}
          bucketnames: {{ include "ContentRender" ( dict "value" .Values.global.storage.buckets.logRule "context" . ) }}
          access_key_id: {{ include "ContentRender" ( dict "value" .Values.global.storage.s3.accessKey "context" . ) }}
          secret_access_key: {{ include "ContentRender" ( dict "value" .Values.global.storage.s3.secretKey "context" . ) }}
          insecure: {{ default true .Values.global.storage.s3.insecure }}
          s3forcepathstyle: true
        {{- end }}
        {{- else if .Values.minio.enabled }}
        type: s3
        s3:
          endpoint: {{ template "loki.minio" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:9000
          {{- with (index .Values.minio.buckets 1) }}
          bucketnames: {{ .name }}
          {{- end }}
          access_key_id: {{ .Values.minio.accessKey }}
          secret_access_key: {{ .Values.minio.secretKey }}
          insecure: true
          s3forcepathstyle: true
        {{- else }}
        type: local
        local:
          directory: /loki/rules
        {{- end }}
    memberlist:
      abort_if_cluster_join_fails: false
      bind_port: {{ .Values.config.memberlist.bindPort }}
      join_members:
        - {{ include "loki.fullname" . }}-memberlist.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.config.memberlist.bindPort }}
      max_join_backoff: 1m
      max_join_retries: 10
      min_join_backoff: 1s
      gossip_to_dead_nodes_time: 1h
    runtime_config:
      file: /etc/loki/runtime_config.yaml
  runtime_config.yaml: |-
    overrides: {}