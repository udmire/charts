apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "cortex.fullname" . }}-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cortex.labels" . | nindent 4 }}
data:
  cortex.yaml: |-
    auth_enabled: true
    api:
      response_compression_enabled: true
    server:
      http_listen_port: {{ .Values.config.server.httpListenPort }}
      grpc_listen_port: {{ .Values.config.server.grpcListenPort }}
      grpc_server_max_recv_msg_size: 104857600
      grpc_server_max_send_msg_size: 104857600
      grpc_server_max_concurrent_streams: 100000
    compactor:
      data_dir: /data
      compaction_interval: 30m
      sharding_enabled: true
      sharding_ring:
        kvstore:
          store: memberlist
          prefix: metrics/compactor/
    distributor:
      shard_by_all_labels: true
      pool:
        health_check_ingesters: true
      ring:
        kvstore:
          store: memberlist
          prefix: metrics/distributor/
    frontend_worker:
      match_max_concurrent: true
      grpc_client_config:
        max_send_msg_size: 104857600
        grpc_compression: snappy
    frontend:
      log_queries_longer_than: 10s
    ingester_client:
      grpc_client_config:
        grpc_compression: snappy
        max_recv_msg_size: 104857600
        max_send_msg_size: 104857600
    ingester:
      walconfig:
        wal_enabled: true
        checkpoint_enabled: true
        recover_from_wal: true
        checkpoint_duration: 15m
      lifecycler:
        join_after: 10s
        observe_period: 10s
        final_sleep: 10s
        num_tokens: 512
        tokens_file_path: /data/tokens
        ring:
          replication_factor: 3
          kvstore:
            store: memberlist
            prefix: metrics/ingester/
      max_chunk_age: 6h
    limits: {}
    storage:
      engine: blocks
    blocks_storage:
      tsdb:
        dir: /data/tsdb
      bucket_store:
        sync_dir: /data/tsdb-sync
        bucket_index:
          enabled: true
        # cached section
        index_cache:
        {{- if index .Values "memcached-blocks-index" "enabled" }}
          backend: memcached
          memcached:
            addresses: dns+{{ include "cortex.memcachedIndex" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:11211
            max_item_size: 5242880
            max_async_buffer_size: 25000
            timeout: 200ms
            max_get_multi_batch_size: 100
        {{- else }}
          backend: inmemory
        {{- end }}
        {{- if index .Values "memcached-blocks-chunk" "enabled" }}
        chunks_cache:
          backend: memcached
          memcached:
            max_get_multi_batch_size: 100
            max_item_size: 1048576
            max_async_buffer_size: 25000
            timeout: 200ms
            addresses: dns+{{ include "cortex.memcachedChunk" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:11211
        {{- end }}
        {{- if index .Values "memcached-blocks-metadata" "enabled" }}
        metadata_cache:
          backend: memcached
          memcached:
            max_get_multi_batch_size: 100
            max_item_size: 1048576
            max_async_buffer_size: 25000
            timeout: 200ms
            addresses: dns+{{ include "cortex.memcachedMetadata" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:11211
        {{- end }}
      # storage section
      {{- if .Values.global.storage.backend }}
      backend: {{.Values.global.storage.backend}}
      {{- if eq .Values.global.storage.backend "s3"}}
      s3:
        endpoint: {{ include "ContentRender" ( dict "value" .Values.global.storage.s3.endpoint "context" . ) }}
        bucket_name: {{ include "ContentRender" ( dict "value" .Values.global.storage.buckets.metricData "context" . ) }}
        access_key_id: {{ include "ContentRender" ( dict "value" .Values.global.storage.s3.accessKey "context" . ) }}
        secret_access_key: {{ include "ContentRender" ( dict "value" .Values.global.storage.s3.secretKey "context" . ) }}
        insecure: {{ default true .Values.global.storage.s3.insecure }}
        http:
          insecure_skip_verify: true
      {{- end }}
      {{- else if .Values.minio.enabled }}
      backend: s3
      s3:
        endpoint: {{ include "cortex.minio" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:9000
        {{- with (index .Values.minio.buckets 0) }}
        bucket_name: {{ .name }}
        {{- end }}
        access_key_id: {{ .Values.minio.accessKey }}
        secret_access_key: {{ .Values.minio.secretKey }}
        insecure: true
        http:
          insecure_skip_verify: true
      {{- else }}
      backend: filesystem
      filesystem:
        dir: /data/tsdb
      {{- end }}
    store_gateway:
      sharding_enabled: true
      sharding_ring:
        kvstore:
          store: memberlist
          prefix: metrics/gateway/
        tokens_file_path: /data/tokens
    memberlist:
      bind_port: {{ .Values.config.memberlist.bindPort }}
      # -- the service name of the memberlist
      # if using memberlist discovery
      join_members:
        - {{ include "cortex.fullname" . }}-memberlist.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ .Values.config.memberlist.bindPort }}
      max_join_backoff: 1m
      max_join_retries: 10
      min_join_backoff: 1s
      gossip_to_dead_nodes_time: 1h
    querier:
      query_ingesters_within: 26h
      query_store_after: 24h
      query_store_for_labels_enabled: true
      at_modifier_enabled: true
      active_query_tracker_dir: /data/active-query-tracker
      store_gateway_client:
        tls_insecure_skip_verify: true
    query_range:
      split_queries_by_interval: 24h
      align_queries_with_step: true
      {{- if index .Values "memcached-frontend" "enabled" }}
      cache_results: true
      results_cache:
        compression: snappy
        cache:
          memcached:
            expiration: 1h
          memcached_client:
            max_item_size: 1048576
            timeout: 200ms
            addresses: dns+{{ include "cortex.memcachedFrontend" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:11211
      {{- end }}
    ruler:
      {{- if .Values.config.ruler.alertmanager }}
      {{- include "ContentRender" ( dict "value" .Values.config.ruler.alertmanager "context" . ) | nindent 6 }}
      {{- end }}
      enable_api: true
      enable_sharding: true
      ring:
        kvstore:
          store: memberlist
          prefix: metrics/rules/
      rule_path: /data
      query_stats_enabled: true
    ruler_storage:
      {{- if .Values.global.storage.backend }}
      backend: {{.Values.global.storage.backend}}
      {{- if eq .Values.global.storage.backend "s3"}}
      s3:
        endpoint: {{ include "ContentRender" ( dict "value" .Values.global.storage.s3.endpoint "context" . ) }}
        bucket_name: {{ include "ContentRender" ( dict "value" .Values.global.storage.buckets.metricRule "context" . ) }}
        access_key_id: {{ include "ContentRender" ( dict "value" .Values.global.storage.s3.accessKey "context" . ) }}
        secret_access_key: {{ include "ContentRender" ( dict "value" .Values.global.storage.s3.secretKey "context" . ) }}
        insecure: {{ default true .Values.global.storage.s3.insecure }}
        http:
          insecure_skip_verify: true
      {{- end }}
      {{- else if .Values.minio.enabled }}
      backend: s3
      s3:
        endpoint: {{ include "cortex.minio" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:9000
        {{- with (index .Values.minio.buckets 1) }}
        bucket_name: {{ .name }}
        {{- end }}
        access_key_id: {{ .Values.minio.accessKey }}
        secret_access_key: {{ .Values.minio.secretKey }}
        insecure: true
        http:
          insecure_skip_verify: true
      {{- else }}
      backend: filesystem
      filesystem:
        dir: /data/rules
      {{- end }}
    runtime_config:
      file: /etc/cortex/runtime_config.yaml
  runtime_config.yaml: |-
    overrides: {}