# Default values for grafana.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  image:
    agent:
      registry: ""
      repository: grafana/agent
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "v0.23.0"
  # -- Kubernetes cluster DNS domain
  clusterDomain: cluster.local

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

config:
  server: 
    httpListenPort: 8080
  receivers:
    jaeger:
      thriftCompact: true
      thriftHttp: true
      thriftGrpc: true
    otlp:
      http: true
      grpc: true
    zipkin: true
  metrics:
    remoteWrites: []
  logs:
    clients: []
  traces:
    remoteWrites:
      - endpoint: xxx
  integrations: {}
agent:
  enabled: true

  service:
    annotations: {}
    labels: {}

  serviceAccount:
    # -- "" disables the individual serviceAccount and uses the global serviceAccount for that component
    name: ""

  serviceMonitor:
    enabled: false
    additionalLabels: {}
    relabelings: []
    metricRelabelings: []
    # -- Additional endpoint configuration https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#endpoint
    extraEndpointSpec: {}

  resources: {}

  # -- Additional Cortex container arguments, e.g. log.level (debug, info, warn, error)
  extraArgs: {}

  # -- Pod Labels
  podLabels: {}

  # -- Pod Annotations
  podAnnotations: {}

  nodeSelector: {}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - agent
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}

  autoscaling:
    # -- Creates a HorizontalPodAutoscaler for the grafana pods.
    enabled: false
    minReplicas: 2
    maxReplicas: 30
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 0  # 80
    # -- Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-configurable-scaling-behavior
    behavior: {}

  persistentVolume:
    subPath:

  startupProbe:
    httpGet:
      path: /-/ready
      port: http-metrics
    failureThreshold: 10
  livenessProbe:
    httpGet:
      path: /-/ready
      port: http-metrics
  readinessProbe:
    httpGet:
      path: /-/ready
      port: http-metrics

  securityContext: {}

  containerSecurityContext:
    enabled: false
    readOnlyRootFilesystem: true

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 60

  tolerations:
    - key: node-role.kubernetes.io/master
      operator: Exists
      effect: NoSchedule

  podDisruptionBudget:
    maxUnavailable: 1

  initContainers: []
  extraContainers: []
  extraVolumes: 
    - name: zoneinfo
      hostPath:
        path: /etc/localtime
    - name: varlog
      hostPath:
        path: /var/log
    - name: docker
      hostPath:
        path: /data/kubernetes/docker
  extraVolumeMounts: 
    - name: zoneinfo
      mountPath: /etc/localtime
      readOnly: true
    - name: varlog
      mountPath: /var/log
    - name: docker
      mountPath: /data/kubernetes/docker
    
  extraPorts: []
  env: []
  lifecycle: {}

eventhandler:
  enabled: false
  replicas: 1

  service:
    annotations: {}
    labels: {}

  serviceAccount:
    # -- "" disables the individual serviceAccount and uses the global serviceAccount for that component
    name: ""

  serviceMonitor:
    enabled: false
    additionalLabels: {}
    relabelings: []
    metricRelabelings: []
    # -- Additional endpoint configuration https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#endpoint
    extraEndpointSpec: {}

  resources: {}

  # -- Additional Cortex container arguments, e.g. log level (debug, info, warn, error)
  extraArgs: {}

  # -- Pod Labels
  podLabels: {}

  # -- Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '8080'

  nodeSelector: {}
  affinity: {}
  annotations: {}

  persistentVolume:
    # -- If true and alertmanager.statefulSet.enabled is true,
    # Alertmanager will create/use a Persistent Volume Claim
    # If false, use emptyDir
    enabled: true

    # -- Alertmanager data Persistent Volume Claim annotations
    annotations: {}

    # -- Alertmanager data Persistent Volume access modes
    # Must match those of existing PV or dynamic provisioner
    # Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    accessModes:
      - ReadWriteOnce

    # -- Alertmanager data Persistent Volume size
    size: 2Gi

    # -- Subdirectory of Alertmanager data Persistent Volume to mount
    # Useful if the volume's root directory is not empty
    subPath: ''

    # -- Alertmanager data Persistent Volume Storage Class
    # If defined, storageClassName: <storageClass>
    # If set to "-", storageClassName: "", which disables dynamic provisioning
    # If undefined (the default) or set to null, no storageClassName spec is
    # set, choosing the default provisioner.
    storageClass: null

  startupProbe:
    httpGet:
      path: /-/ready
      port: http-metrics
    failureThreshold: 10
  livenessProbe:
    httpGet:
      path: /-/ready
      port: http-metrics
  readinessProbe:
    httpGet:
      path: /-/ready
      port: http-metrics

  securityContext: {}

  containerSecurityContext:
    enabled: false
    readOnlyRootFilesystem: true

  # -- Tolerations for pod assignment
  # ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # -- If not set then a PodDisruptionBudget will not be created
  podDisruptionBudget:
    maxUnavailable: 1

  statefulStrategy:
    type: RollingUpdate

  terminationGracePeriodSeconds: 60

  # -- Init containers to be added to the cortex pod.
  initContainers: []

  # -- Additional containers to be added to the cortex pod.
  extraContainers: []

  # -- Additional volumes to the cortex pod.
  extraVolumes: 
    - name: zoneinfo
      hostPath:
        path: /etc/localtime
    - name: varlog
      hostPath:
        path: /var/log
    - name: docker
      hostPath:
        path: /var/lib/docker/containers
  extraVolumeMounts: 
    - name: zoneinfo
      mountPath: /etc/localtime
      readOnly: true
    - name: varlog
      mountPath: /var/log
    - name: docker
      mountPath: /var/lib/docker/containers

  # -- Additional ports to the cortex services. Useful to expose extra container ports.
  extraPorts: []

  # -- Extra env variables to pass to the cortex container
  env: []


scraper:
  enabled: true
  replicas: 3

  service:
    annotations: {}
    labels: {}

  serviceAccount:
    # -- "" disables the individual serviceAccount and uses the global serviceAccount for that component
    name: ""

  serviceMonitor:
    enabled: false
    additionalLabels: {}
    relabelings: []
    metricRelabelings: []
    # -- Additional endpoint configuration https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#endpoint
    extraEndpointSpec: {}

  resources: {}

  # -- Additional Cortex container arguments, e.g. log.level (debug, info, warn, error)
  extraArgs: {}

  # -- Pod Labels
  podLabels: {}

  # -- Pod Annotations
  podAnnotations: {}

  nodeSelector: {}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                    - grafana
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}

  autoscaling:
    # -- Creates a HorizontalPodAutoscaler for the grafana pods.
    enabled: false
    minReplicas: 2
    maxReplicas: 30
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 0  # 80
    # -- Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-configurable-scaling-behavior
    behavior: {}

  persistentVolume:
    subPath:

  startupProbe:
    httpGet:
      path: /-/ready
      port: http-metrics
    failureThreshold: 10
  livenessProbe:
    httpGet:
      path: /-/ready
      port: http-metrics
  readinessProbe:
    httpGet:
      path: /-/ready
      port: http-metrics

  securityContext: {}

  containerSecurityContext:
    enabled: false
    readOnlyRootFilesystem: true

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 60

  tolerations: []

  podDisruptionBudget:
    maxUnavailable: 1

  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []
  lifecycle: {}
